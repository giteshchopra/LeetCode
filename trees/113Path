/*

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> outerList = new ArrayList<List<Integer>>();
    public void calculatePaths(TreeNode root, int sum, List<Integer>list){
        //System.out.println(" Function called with : "+sum);
        if(root == null)
            return;
        list.add(root.val);
        if(root.left == null && root.right == null){
            //System.out.println(" Path sum : "+(sum-root.val));
            if(sum - root.val == 0){
                //System.out.println("Outer list added");
                outerList.add(new ArrayList<Integer>(list));
                //System.out.println("Outer list " + outerList);

            }
        }
        if(root.left!=null){
            
            calculatePaths(root.left,sum-root.val,list);        }
        if(root.right!=null){
            calculatePaths(root.right,sum-root.val,list);
        }
        list.remove(list.size()-1);
        
    }
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<Integer> list = new ArrayList<Integer>();
       calculatePaths(root,sum,list);
        return outerList;
        
        
    }
}
